
org: adamgibbs
app: branching-software
service: branching-software-back

plugins:
  - serverless-dynamodb-local
  - serverless-offline

package:
  exclude:
    - node_modules/dynamodb-localhost/**
    - node_modules/serverless-dynamodb-local/**
    - node_modules/serverless-offline/**

custom:
  tablePrefix: branching-software-${self:provider.stage}
  usersTable: ${self:custom.tablePrefix}-users-v1
  assetsTable: ${self:custom.tablePrefix}-assets-v1
  goalsTable: ${self:custom.tablePrefix}-goals-v1

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
    stages:
      - dev

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  lambdaHashingVersion: 20201221
  stage: dev
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: "*"

  environment:
    USERS_TABLE: ${self:custom.usersTable}
    ASSETS_TABLE: ${self:custom.assetsTable}
    GOALS_TABLE: ${self:custom.goalsTable}

functions:
  signup:
    handler: server/v1/auth/signup.signup
    events:
      - http:
          path: v1/signup
          method: post
          cors: true

  signin:
    handler: server/v1/auth/signin.signin
    events:
      - http:
          path: v1/signin
          method: post
          cors: true

  addAsset:
    handler: server/v1/assets/add.add
    events:
      - http:
          path: v1/assets/add
          method: post
          cors: true

  allAssets:
    handler: server/v1/assets/all.all
    events:
      - http:
          path: v1/assets/all
          method: post
          cors: true

  getAssets:
    handler: server/v1/assets/get.get
    events:
      - http:
          path: v1/assets/get
          method: post
          cors: true

resources:
  Resources:
    UsersTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.usersTable}

    AssetsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-asset-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.assetsTable}

    GoalsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-goal-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.goalsTable}