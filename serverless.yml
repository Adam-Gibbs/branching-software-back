org: adamgibbs
app: branching-software
service: branching-software-back

plugins:
  - serverless-dynamodb-local
  - serverless-offline

package:
  exclude:
    - node_modules/dynamodb-localhost/**
    - node_modules/serverless-dynamodb-local/**
    - node_modules/serverless-offline/**

custom:
  tablePrefix: branching-software-${self:provider.stage}
  usersTable: ${self:custom.tablePrefix}-users-v3
  assetsTable: ${self:custom.tablePrefix}-assets-v2
  goalsTable: ${self:custom.tablePrefix}-goals-v2
  locationsTable: ${self:custom.tablePrefix}-locations-v2
  assetTypesTable: ${self:custom.tablePrefix}-asset-types-v2

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
    stages:
      - uniprod

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  lambdaHashingVersion: 20201221
  stage: uniprod
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: "*"

  environment:
    USERS_TABLE: ${self:custom.usersTable}
    ASSETS_TABLE: ${self:custom.assetsTable}
    GOALS_TABLE: ${self:custom.goalsTable}
    LOCATIONS_TABLE: ${self:custom.locationsTable}
    ASSET_TYPES_TABLE: ${self:custom.assetTypesTable}

functions:
  signup:
    handler: server/v1/auth/signup.signup
    events:
      - http:
          path: v1/signup
          method: post
          cors: true

  signin:
    handler: server/v1/auth/signin.signin
    events:
      - http:
          path: v1/signin
          method: post
          cors: true

  getUser:
    handler: server/v1/user/getUserData.getUserData
    events:
      - http:
          path: v1/user
          method: post
          cors: true

  addAsset:
    handler: server/v1/assets/add.addAsset
    events:
      - http:
          path: v1/assets/add
          method: post
          cors: true

  allAssets:
    handler: server/v1/assets/all.allAssets
    events:
      - http:
          path: v1/assets/all
          method: post
          cors: true

  getAssets:
    handler: server/v1/assets/get.getAsset
    events:
      - http:
          path: v1/assets/get
          method: post
          cors: true

  addGoal:
    handler: server/v1/goals/add.addGoal
    events:
      - http:
          path: v1/goals/add
          method: post
          cors: true

  allGoals:
    handler: server/v1/goals/all.allGoals
    events:
      - http:
          path: v1/goals/all
          method: post
          cors: true

  deleteGoal:
    handler: server/v1/goals/delete.deleteGoal
    events:
      - http:
          path: v1/goals/delete
          method: post
          cors: true

  addLocation:
    handler: server/v1/locations/add.addLocation
    events:
      - http:
          path: v1/locations/add
          method: post
          cors: true

  allLocations:
    handler: server/v1/locations/all.allLocations
    events:
      - http:
          path: v1/locations/all
          method: post
          cors: true

  addAssetType:
    handler: server/v1/asset-types/add.addAssetType
    events:
      - http:
          path: v1/asset-types/add
          method: post
          cors: true

  allAssetTypes:
    handler: server/v1/asset-types/all.allAssetTypes
    events:
      - http:
          path: v1/asset-types/all
          method: post
          cors: true

  seedUser:
    handler: server/v1/seed/updateUser.updateUser
    events:
      - http:
          path: v1/seed/user
          method: post
          cors: true

  seedGoals:
    handler: server/v1/seed/updateGoals.updateGoals
    events:
      - http:
          path: v1/seed/goals
          method: post
          cors: true

  seedAssets:
    handler: server/v1/seed/updateAssets.updateAssets
    events:
      - http:
          path: v1/seed/assets
          method: post
          cors: true

resources:
  Resources:
    UsersTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: email-user-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.usersTable}

    AssetsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-asset-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.assetsTable}

    GoalsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-goal-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.goalsTable}

    LocationsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-location-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.locationsTable}

    AssetTypesTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-assetType-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.assetTypesTable}
        